/*
    Задание 2. Проект симулятора работы компьютера

    Реализуйте простую модель работы персонального компьютера в качестве многомодульного проекта. В компьютере несколько
основных, условных компонент.
    Центральный процессор (cpu) — должен иметь в себе функцию compute, которая складывает 8 чисел из буфера оперативной
памяти (см. далее) и выводит результат в консоль.
    Оперативная память (ram) — содержит буфер на 8 целых чисел, которые можно заполнить функцией write и считать
функцией read.
    Жёсткий диск (disk) — имеет в себе две функции, save и load. Функция save должна сохранить состояние 8 чисел из
оперативной памяти на постоянный носитель в файл data.txt. Функция load — загрузить их с носителя в оперативную память.
    Графическая карта (gpu) — выводит в консоль 8 чисел из оперативной памяти.
    Клавиатура (kbd) — позволяет ввести 8 чисел и разместить их в оперативной памяти.

    Каждая компонента должна располагаться в отдельном модуле, с отдельным заголовочным файлом. Основной модуль
программы (main.cpp) должен считывать пользовательский ввод команды, которая соответствует отдельным функциям устройств:
sum (вычисление суммы), save (сохранить в файл), load (загрузить из файла), input (ввести с клавиатуры),
display (вывести на экран). Команда exit — выходит из программы.

    Советы и рекомендации
    Тщательно продумайте зависимости между модулями и теми файлами, которые должны быть включены в те или иные исходные
файлы. Не забывайте про #pragma once в заголовочных файлах.
    В заголовочных файлах модулей располагайте только объявления функций. Их определения должны быть уже в исходных
файлах (.cpp).
*/

#include <iostream>
#include <string>
#include "cpu.h"
#include "ram.h"
#include "gpu.h"
#include "disk.h"
#include "kbd.h"

void InputCommand(std::string& command) {
    std::cout << "Available commands: sum, save, load, input, display, exit." << std::endl;
    do {
        std::cout << "Enter the command: ";
        std::cin >> command;
    }
    while (!(command == "sum" ||
             command == "save" ||
             command == "load" ||
             command == "input" ||
             command == "display" ||
             command == "exit"));
}

int main() {
    std::string command;
    Buffer buffer{};

    do {
        InputCommand( command);

        if (command == "sum") {
            compute( buffer);
        }
        else if (command == "save") {
            save( buffer);
        }
        else if (command == "load") {
            load( buffer);
        }
        else if (command == "input") {
            input( buffer);
        }
        else if (command == "display") {
            display( buffer);
        }
    }
    while (command != "exit");

    return 0;
}
